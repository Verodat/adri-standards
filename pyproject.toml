[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "adri-standards"
version = "1.0.0"
authors = [
    {name = "Verodat", email = "standards@verodat.com"},
]
description = "Agent Data Reliability Intelligence Standards - Open standards for AI agent data quality"
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
keywords = [
    "ai", "agents", "data-quality", "validation", "standards",
    "langchain", "crewai", "autogen", "reliability", "adri"
]
dependencies = [
    "pyyaml>=6.0",
    "jsonschema>=4.0",
    "packaging>=21.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=5.0",
    "mypy>=1.0",
]
docs = [
    "mkdocs>=1.4",
    "mkdocs-material>=8.0",
    "mkdocs-mermaid2-plugin>=0.6",
]

[project.scripts]
adri-standards = "tools.cli:main"

[project.urls]
Homepage = "https://github.com/verodat/adri-standards"
Documentation = "https://adri.verodat.com"
Repository = "https://github.com/verodat/adri-standards"
Issues = "https://github.com/verodat/adri-standards/issues"
Discussions = "https://github.com/verodat/adri-standards/discussions"
Enterprise = "https://verodat.com/adri"

[tool.setuptools.packages.find]
where = ["."]
include = ["standards*", "tools*", "docs*", "examples*"]

[tool.setuptools.package-data]
standards = ["**/*.yaml", "**/*.yml"]
docs = ["**/*.md"]
examples = ["**/*.py", "**/*.yaml"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["standards", "tools"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["standards", "tools"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
